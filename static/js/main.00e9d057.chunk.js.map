{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.components.jsx","components/search-box/search-box.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","res","json","users","setState","this","filteredMonster","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAYeA,EAVF,SAACC,GACV,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCOfC,EAXE,SAACR,GACd,OACI,qBAAKC,UAAU,YAAf,SAEKD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAChB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCGpBM,G,MATG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAG9B,OACI,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EACjDG,SAAUF,MCmDPG,E,kDA1Bb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAJH,E,qDAOd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKC,SAAS,CAAEf,SAAUc,S,oBAE/C,WAAU,IAAD,OACP,EAAgCE,KAAKR,MAA9BR,EAAP,EAAOA,SAAUS,EAAjB,EAAiBA,YACXQ,EAAkBjB,EAASkB,QAAO,SAAAvB,GAAO,OAAIA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBACnG,OACE,sBAAK3B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAiBC,aAAc,SAACiB,GAAD,OAAO,EAAKN,SAAS,CAACN,YAAaY,EAAEC,OAAOC,WAClG,cAAC,EAAD,CAAUvB,SAAUiB,W,GApBVO,aCnBHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.00e9d057.chunk.js","sourcesContent":["import './card.style.css'\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import './card-list.styles.css'\r\nimport Card from '../card/card.component'\r\n\r\nconst CardList = (props) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {/*{props.children} */}\r\n            {props.monsters.map((monster) => (\r\n                <Card key={monster.id} monster={monster} />\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import './search-box.styles.css'\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n    /* this.setState({searchField: e.target.value})    /// it has a CallBack function */\r\n\r\n    return (\r\n        <input className=\"search\" type=\"search\" placeholder={placeholder}\r\n            onChange={handleChange} />\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","// import { useState } from 'react';\nimport './App.css';\nimport { Component } from 'react';\nimport CardList from './components/card-list/card-list.components'\nimport SearchBox from './components/search-box/search-box.components';\n\n// Don't repeat your self\n\n// ! I Don't why it didn't assigned the id\n// function App() {\n//   const usersName = async () => {\n//     try {\n//       await fetch('https://jsonplaceholder.typicode.com/users')\n//         .then((res) => res.json())\n//         .then((users) => setMonster(users));\n//     } catch (error) {\n//       console.log('error', error);\n//     }\n//   };\n\n//   const [monsters, setMonster] = useState([usersName()]);\n\n//   return (\n//     <div className=\"container\">\n//       {monsters.map((monster) => (\n//         <h3 key={monster.id}>{monster.name}</h3>\n//       ))}\n//     </div>\n//   );\n// }\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((res) => res.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonster = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeholder='search monsters'handleChange={(e) => this.setState({searchField: e.target.value})}/>\n        <CardList monsters={filteredMonster}>\n        </CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}